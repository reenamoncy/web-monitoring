{"ast":null,"code":"import axios from\"axios\";const API_BASE_URL=process.env.REACT_APP_API_URL||\"http://localhost:8000/api\";export const fetchAlertCounts=async()=>{try{const response=await axios.get(`${API_BASE_URL}/alerts/counts`);console.log(\"Alert counts fetched successfully:\",response.data);// Debugging log\nreturn response.data;}catch(error){console.error(\"Error fetching alert counts:\",error);// Debugging log\nthrow error;}};export const fetchServers=async()=>{try{const response=await axios.get(`${API_BASE_URL}/servers`);console.log(\"Servers fetched successfully:\",response.data);// Debugging log\nreturn response.data;}catch(error){console.error(\"Error fetching servers:\",error);// Debugging log\nthrow error;}};export const fetchServerMetrics=async function(serverId){let hours=arguments.length>1&&arguments[1]!==undefined?arguments[1]:24;try{const response=await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/metrics`,{params:{hours}});console.log(\"Server metrics fetched:\",response.data);return response.data;}catch(error){console.error(\"Error fetching server metrics:\",error);throw error;}};export const fetchNetworkTraffic=async function(serverId){let hours=arguments.length>1&&arguments[1]!==undefined?arguments[1]:24;try{const response=await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/network`,{params:{hours}});console.log(\"Network traffic fetched:\",response.data);return response.data;}catch(error){console.error(\"Error fetching network traffic:\",error);throw error;}};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","fetchAlertCounts","response","get","console","log","data","error","fetchServers","fetchServerMetrics","serverId","hours","arguments","length","undefined","params","fetchNetworkTraffic"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL =\r\n  process.env.REACT_APP_API_URL || \"http://localhost:8000/api\";\r\n\r\nexport interface AlertCounts {\r\n  critical: number;\r\n  medium: number;\r\n  low: number;\r\n}\r\n\r\nexport interface Server {\r\n  id: number;\r\n  name: string;\r\n  ip: string; // Updated property name from ip_address to ip\r\n  location: string;\r\n  status: string; // online, offline, maintenance\r\n  lastUpdated: string; // Updated property name from last_checked to lastUpdated\r\n}\r\n\r\nexport interface ServerMetricsResponse {\r\n  timestamps: string[];\r\n  cpu_usage: number[];\r\n  ram_usage: number[];\r\n  disk_usage: number[];\r\n  application_usage: number[];\r\n}\r\n\r\nexport interface NetworkTrafficResponse {\r\n  timestamps: string[];\r\n  network_in: number[];\r\n}\r\n\r\nexport const fetchAlertCounts = async (): Promise<AlertCounts> => {\r\n  try {\r\n    const response = await axios.get<AlertCounts>(\r\n      `${API_BASE_URL}/alerts/counts`\r\n    );\r\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching alert counts:\", error); // Debugging log\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServers = async (): Promise<Server[]> => {\r\n  try {\r\n    const response = await axios.get<Server[]>(`${API_BASE_URL}/servers`);\r\n    console.log(\"Servers fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching servers:\", error); // Debugging log\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServerMetrics = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<ServerMetricsResponse> => {\r\n  try {\r\n    const response = await axios.get<ServerMetricsResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/metrics`,\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Server metrics fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching server metrics:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchNetworkTraffic = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<NetworkTrafficResponse> => {\r\n  try {\r\n    const response = await axios.get<NetworkTrafficResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/network`,\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Network traffic fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching network traffic:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,YAAY,CAChBC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CA8B9D,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAA,GAAkC,CAChE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACO,GAAG,CAC9B,GAAGN,YAAY,gBACjB,CAAC,CACDO,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEH,QAAQ,CAACI,IAAI,CAAC,CAAE;AAClE,MAAO,CAAAJ,QAAQ,CAACI,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CAAE;AACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAA+B,CACzD,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACO,GAAG,CAAW,GAAGN,YAAY,UAAU,CAAC,CACrEO,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEH,QAAQ,CAACI,IAAI,CAAC,CAAE;AAC7D,MAAO,CAAAJ,QAAQ,CAACI,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAAE;AACjD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,kBAAkB,CAAG,cAAAA,CAChCC,QAAgB,CAEmB,IADnC,CAAAC,KAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAElB,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACO,GAAG,CAC9B,GAAGN,YAAY,mBAAmBa,QAAQ,UAAU,CACpD,CACEK,MAAM,CAAE,CAAEJ,KAAM,CAClB,CACF,CAAC,CACDP,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEH,QAAQ,CAACI,IAAI,CAAC,CACrD,MAAO,CAAAJ,QAAQ,CAACI,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAS,mBAAmB,CAAG,cAAAA,CACjCN,QAAgB,CAEoB,IADpC,CAAAC,KAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAElB,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACO,GAAG,CAC9B,GAAGN,YAAY,mBAAmBa,QAAQ,UAAU,CACpD,CACEK,MAAM,CAAE,CAAEJ,KAAM,CAClB,CACF,CAAC,CACDP,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAEH,QAAQ,CAACI,IAAI,CAAC,CACtD,MAAO,CAAAJ,QAAQ,CAACI,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}