{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import Header from\"./components/Header\";import StatsPanel from\"./components/StatsPanel\";import ChartCard from\"./components/ChartCard\";import ServerList from\"./components/ServerList\";import{fetchServers,fetchAlertCounts,fetchServerMetrics,fetchNetworkTraffic}from\"./services/api\";// Use the Server type and import API functions\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[servers,setServers]=useState([]);const[alerts,setAlerts]=useState({critical:0,medium:0,low:0});const[resourceUsage,setResourceUsage]=useState([]);const[networkTraffic,setNetworkTraffic]=useState([]);const[error,setError]=useState(null);useEffect(()=>{const fetchData=async()=>{try{const serversData=await fetchServers();setServers(serversData);const alertCounts=await fetchAlertCounts();setAlerts(alertCounts);// Fetch resource usage and network traffic data from the API\nconst serverMetrics=await fetchServerMetrics(serversData[0].id);// Example: Fetch metrics for the first server\nsetResourceUsage(serverMetrics.timestamps.map((timestamp,index)=>({name:timestamp,// Updated to include 'name' field for ChartCard compatibility\ncpu:serverMetrics.cpu_usage[index],ram:serverMetrics.ram_usage[index],disk:serverMetrics.disk_usage[index]})));const networkTrafficData=await fetchNetworkTraffic(serversData[0].id);// Example: Fetch network traffic for the first server\nsetNetworkTraffic(networkTrafficData.timestamps.map((timestamp,index)=>({name:timestamp,// Updated to include 'name' field for ChartCard compatibility\nincoming:networkTrafficData.network_in[index]})));}catch(e){setError(\"Failed to fetch data from the API.\");}};fetchData();},[]);if(error){return/*#__PURE__*/_jsx(\"div\",{style:{color:\"red\",textAlign:\"center\"},children:error});}return/*#__PURE__*/_jsxs(\"div\",{style:styles.container,children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"main\",{style:styles.content,children:[/*#__PURE__*/_jsx(StatsPanel,{alerts:alerts}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Resource Monitoring\"}),/*#__PURE__*/_jsxs(\"div\",{style:styles.grid,children:[/*#__PURE__*/_jsx(ChartCard,{title:\"CPU Usage\",type:\"line\",data:resourceUsage,dataKey:\"cpu\",color:\"#3498db\"}),/*#__PURE__*/_jsx(ChartCard,{title:\"RAM Usage\",type:\"line\",data:resourceUsage,dataKey:\"ram\",color:\"#27ae60\"}),/*#__PURE__*/_jsx(ChartCard,{title:\"Disk Usage\",type:\"bar\",data:resourceUsage,dataKey:\"disk\",color:\"#e74c3c\"}),/*#__PURE__*/_jsx(ChartCard,{title:\"Network Traffic\",type:\"line\",data:networkTraffic,dataKey:\"incoming\",color:\"#9b59b6\"})]})]}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Server Status\"}),/*#__PURE__*/_jsx(ServerList,{servers:servers})]})]})]});};const styles={container:{minHeight:\"100vh\",backgroundColor:\"#f4f4f4\",padding:\"2rem\"},content:{maxWidth:\"1200px\",margin:\"0 auto\"},grid:{display:\"grid\",gridTemplateColumns:\"repeat(auto-fit, minmax(300px, 1fr))\",gap:\"1rem\"}};export default App;","map":{"version":3,"names":["React","useEffect","useState","Header","StatsPanel","ChartCard","ServerList","fetchServers","fetchAlertCounts","fetchServerMetrics","fetchNetworkTraffic","jsx","_jsx","jsxs","_jsxs","App","servers","setServers","alerts","setAlerts","critical","medium","low","resourceUsage","setResourceUsage","networkTraffic","setNetworkTraffic","error","setError","fetchData","serversData","alertCounts","serverMetrics","id","timestamps","map","timestamp","index","name","cpu","cpu_usage","ram","ram_usage","disk","disk_usage","networkTrafficData","incoming","network_in","e","style","color","textAlign","children","styles","container","content","grid","title","type","data","dataKey","minHeight","backgroundColor","padding","maxWidth","margin","display","gridTemplateColumns","gap"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport StatsPanel from \"./components/StatsPanel\";\nimport ChartCard from \"./components/ChartCard\";\nimport ServerList from \"./components/ServerList\";\nimport {\n  Server,\n  fetchServers,\n  fetchAlertCounts,\n  fetchServerMetrics,\n  fetchNetworkTraffic,\n} from \"./services/api\"; // Use the Server type and import API functions\n\ninterface AlertCounts {\n  critical: number;\n  medium: number;\n  low: number;\n}\n\nconst App: React.FC = () => {\n  const [servers, setServers] = useState<Server[]>([]);\n  const [alerts, setAlerts] = useState<AlertCounts>({\n    critical: 0,\n    medium: 0,\n    low: 0,\n  });\n  const [resourceUsage, setResourceUsage] = useState<any[]>([]);\n  const [networkTraffic, setNetworkTraffic] = useState<any[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const serversData = await fetchServers();\n        setServers(serversData);\n\n        const alertCounts = await fetchAlertCounts();\n        setAlerts(alertCounts);\n\n        // Fetch resource usage and network traffic data from the API\n        const serverMetrics = await fetchServerMetrics(serversData[0].id); // Example: Fetch metrics for the first server\n        setResourceUsage(\n          serverMetrics.timestamps.map((timestamp, index) => ({\n            name: timestamp, // Updated to include 'name' field for ChartCard compatibility\n            cpu: serverMetrics.cpu_usage[index],\n            ram: serverMetrics.ram_usage[index],\n            disk: serverMetrics.disk_usage[index],\n          }))\n        );\n\n        const networkTrafficData = await fetchNetworkTraffic(serversData[0].id); // Example: Fetch network traffic for the first server\n        setNetworkTraffic(\n          networkTrafficData.timestamps.map((timestamp, index) => ({\n            name: timestamp, // Updated to include 'name' field for ChartCard compatibility\n            incoming: networkTrafficData.network_in[index],\n          }))\n        );\n      } catch (e) {\n        setError(\"Failed to fetch data from the API.\");\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (error) {\n    return <div style={{ color: \"red\", textAlign: \"center\" }}>{error}</div>;\n  }\n\n  return (\n    <div style={styles.container}>\n      <Header />\n      <main style={styles.content}>\n        <StatsPanel alerts={alerts} />\n        <section>\n          <h2>Resource Monitoring</h2>\n          <div style={styles.grid}>\n            <ChartCard\n              title=\"CPU Usage\"\n              type=\"line\"\n              data={resourceUsage}\n              dataKey=\"cpu\"\n              color=\"#3498db\"\n            />\n            <ChartCard\n              title=\"RAM Usage\"\n              type=\"line\"\n              data={resourceUsage}\n              dataKey=\"ram\"\n              color=\"#27ae60\"\n            />\n            <ChartCard\n              title=\"Disk Usage\"\n              type=\"bar\"\n              data={resourceUsage}\n              dataKey=\"disk\"\n              color=\"#e74c3c\"\n            />\n            <ChartCard\n              title=\"Network Traffic\"\n              type=\"line\"\n              data={networkTraffic}\n              dataKey=\"incoming\"\n              color=\"#9b59b6\"\n            />\n          </div>\n        </section>\n\n        <section>\n          <h2>Server Status</h2>\n          <ServerList servers={servers} />\n        </section>\n      </main>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    minHeight: \"100vh\",\n    backgroundColor: \"#f4f4f4\",\n    padding: \"2rem\",\n  },\n  content: {\n    maxWidth: \"1200px\",\n    margin: \"0 auto\",\n  },\n  grid: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1rem\",\n  },\n};\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,OAEEC,YAAY,CACZC,gBAAgB,CAChBC,kBAAkB,CAClBC,mBAAmB,KACd,gBAAgB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAQzB,KAAM,CAAAC,GAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAW,EAAE,CAAC,CACpD,KAAM,CAACgB,MAAM,CAAEC,SAAS,CAAC,CAAGjB,QAAQ,CAAc,CAChDkB,QAAQ,CAAE,CAAC,CACXC,MAAM,CAAE,CAAC,CACTC,GAAG,CAAE,CACP,CAAC,CAAC,CACF,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGtB,QAAQ,CAAQ,EAAE,CAAC,CAC7D,KAAM,CAACuB,cAAc,CAAEC,iBAAiB,CAAC,CAAGxB,QAAQ,CAAQ,EAAE,CAAC,CAC/D,KAAM,CAACyB,KAAK,CAAEC,QAAQ,CAAC,CAAG1B,QAAQ,CAAgB,IAAI,CAAC,CAEvDD,SAAS,CAAC,IAAM,CACd,KAAM,CAAA4B,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAvB,YAAY,CAAC,CAAC,CACxCU,UAAU,CAACa,WAAW,CAAC,CAEvB,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAvB,gBAAgB,CAAC,CAAC,CAC5CW,SAAS,CAACY,WAAW,CAAC,CAEtB;AACA,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAvB,kBAAkB,CAACqB,WAAW,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC,CAAE;AACnET,gBAAgB,CACdQ,aAAa,CAACE,UAAU,CAACC,GAAG,CAAC,CAACC,SAAS,CAAEC,KAAK,IAAM,CAClDC,IAAI,CAAEF,SAAS,CAAE;AACjBG,GAAG,CAAEP,aAAa,CAACQ,SAAS,CAACH,KAAK,CAAC,CACnCI,GAAG,CAAET,aAAa,CAACU,SAAS,CAACL,KAAK,CAAC,CACnCM,IAAI,CAAEX,aAAa,CAACY,UAAU,CAACP,KAAK,CACtC,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAQ,kBAAkB,CAAG,KAAM,CAAAnC,mBAAmB,CAACoB,WAAW,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC,CAAE;AACzEP,iBAAiB,CACfmB,kBAAkB,CAACX,UAAU,CAACC,GAAG,CAAC,CAACC,SAAS,CAAEC,KAAK,IAAM,CACvDC,IAAI,CAAEF,SAAS,CAAE;AACjBU,QAAQ,CAAED,kBAAkB,CAACE,UAAU,CAACV,KAAK,CAC/C,CAAC,CAAC,CACJ,CAAC,CACH,CAAE,MAAOW,CAAC,CAAE,CACVpB,QAAQ,CAAC,oCAAoC,CAAC,CAChD,CACF,CAAC,CAEDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIF,KAAK,CAAE,CACT,mBAAOf,IAAA,QAAKqC,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAK,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,CAAEzB,KAAK,CAAM,CAAC,CACzE,CAEA,mBACEb,KAAA,QAAKmC,KAAK,CAAEI,MAAM,CAACC,SAAU,CAAAF,QAAA,eAC3BxC,IAAA,CAACT,MAAM,GAAE,CAAC,cACVW,KAAA,SAAMmC,KAAK,CAAEI,MAAM,CAACE,OAAQ,CAAAH,QAAA,eAC1BxC,IAAA,CAACR,UAAU,EAACc,MAAM,CAAEA,MAAO,CAAE,CAAC,cAC9BJ,KAAA,YAAAsC,QAAA,eACExC,IAAA,OAAAwC,QAAA,CAAI,qBAAmB,CAAI,CAAC,cAC5BtC,KAAA,QAAKmC,KAAK,CAAEI,MAAM,CAACG,IAAK,CAAAJ,QAAA,eACtBxC,IAAA,CAACP,SAAS,EACRoD,KAAK,CAAC,WAAW,CACjBC,IAAI,CAAC,MAAM,CACXC,IAAI,CAAEpC,aAAc,CACpBqC,OAAO,CAAC,KAAK,CACbV,KAAK,CAAC,SAAS,CAChB,CAAC,cACFtC,IAAA,CAACP,SAAS,EACRoD,KAAK,CAAC,WAAW,CACjBC,IAAI,CAAC,MAAM,CACXC,IAAI,CAAEpC,aAAc,CACpBqC,OAAO,CAAC,KAAK,CACbV,KAAK,CAAC,SAAS,CAChB,CAAC,cACFtC,IAAA,CAACP,SAAS,EACRoD,KAAK,CAAC,YAAY,CAClBC,IAAI,CAAC,KAAK,CACVC,IAAI,CAAEpC,aAAc,CACpBqC,OAAO,CAAC,MAAM,CACdV,KAAK,CAAC,SAAS,CAChB,CAAC,cACFtC,IAAA,CAACP,SAAS,EACRoD,KAAK,CAAC,iBAAiB,CACvBC,IAAI,CAAC,MAAM,CACXC,IAAI,CAAElC,cAAe,CACrBmC,OAAO,CAAC,UAAU,CAClBV,KAAK,CAAC,SAAS,CAChB,CAAC,EACC,CAAC,EACC,CAAC,cAEVpC,KAAA,YAAAsC,QAAA,eACExC,IAAA,OAAAwC,QAAA,CAAI,eAAa,CAAI,CAAC,cACtBxC,IAAA,CAACN,UAAU,EAACU,OAAO,CAAEA,OAAQ,CAAE,CAAC,EACzB,CAAC,EACN,CAAC,EACJ,CAAC,CAEV,CAAC,CAED,KAAM,CAAAqC,MAAM,CAAG,CACbC,SAAS,CAAE,CACTO,SAAS,CAAE,OAAO,CAClBC,eAAe,CAAE,SAAS,CAC1BC,OAAO,CAAE,MACX,CAAC,CACDR,OAAO,CAAE,CACPS,QAAQ,CAAE,QAAQ,CAClBC,MAAM,CAAE,QACV,CAAC,CACDT,IAAI,CAAE,CACJU,OAAO,CAAE,MAAM,CACfC,mBAAmB,CAAE,sCAAsC,CAC3DC,GAAG,CAAE,MACP,CACF,CAAC,CAED,cAAe,CAAArD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}