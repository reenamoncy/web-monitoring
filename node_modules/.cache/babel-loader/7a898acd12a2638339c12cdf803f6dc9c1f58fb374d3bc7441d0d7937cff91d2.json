{"ast":null,"code":"import axios from \"axios\";\n\n// Assuming these interfaces are declared elsewhere\n\n// Base URL for the API\nconst API_BASE_URL = \"https://your-api-url.com\"; // Adjust this with your actual API base URL\n\n// Fetch alert counts\nexport const fetchAlertCounts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts/counts/` // Added trailing slash\n    );\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching alert counts:\", error); // Debugging log\n    throw new Error(\"Failed to fetch alert counts\");\n  }\n};\n\n// Fetch list of servers\nexport const fetchServers = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/servers/`); // Added trailing slash\n    console.log(\"Servers fetched successfully:\", response.data); // Debugging log\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching servers:\", error); // Debugging log\n    throw new Error(\"Failed to fetch servers\");\n  }\n};\n\n// Fetch server metrics\nexport const fetchServerMetrics = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/metrics/`,\n    // Added trailing slash\n    {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Server metrics fetched:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching server metrics:\", error);\n    throw new Error(\"Failed to fetch server metrics\");\n  }\n};\n\n// Fetch network traffic\nexport const fetchNetworkTraffic = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/network/`,\n    // Added trailing slash\n    {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Network traffic fetched:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching network traffic:\", error);\n    throw new Error(\"Failed to fetch network traffic\");\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchAlertCounts","response","get","console","log","data","error","Error","fetchServers","fetchServerMetrics","serverId","hours","params","fetchNetworkTraffic"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Assuming these interfaces are declared elsewhere\r\nimport {\r\n  AlertCounts,\r\n  Server,\r\n  ServerMetricsResponse,\r\n  NetworkTrafficResponse,\r\n} from \"./types\";\r\n\r\n// Base URL for the API\r\nconst API_BASE_URL = \"https://your-api-url.com\"; // Adjust this with your actual API base URL\r\n\r\n// Fetch alert counts\r\nexport const fetchAlertCounts = async (): Promise<AlertCounts> => {\r\n  try {\r\n    const response = await axios.get<AlertCounts>(\r\n      `${API_BASE_URL}/alerts/counts/` // Added trailing slash\r\n    );\r\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching alert counts:\", error); // Debugging log\r\n    throw new Error(\"Failed to fetch alert counts\");\r\n  }\r\n};\r\n\r\n// Fetch list of servers\r\nexport const fetchServers = async (): Promise<Server[]> => {\r\n  try {\r\n    const response = await axios.get<Server[]>(`${API_BASE_URL}/servers/`); // Added trailing slash\r\n    console.log(\"Servers fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching servers:\", error); // Debugging log\r\n    throw new Error(\"Failed to fetch servers\");\r\n  }\r\n};\r\n\r\n// Fetch server metrics\r\nexport const fetchServerMetrics = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<ServerMetricsResponse> => {\r\n  try {\r\n    const response = await axios.get<ServerMetricsResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/metrics/`, // Added trailing slash\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Server metrics fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching server metrics:\", error);\r\n    throw new Error(\"Failed to fetch server metrics\");\r\n  }\r\n};\r\n\r\n// Fetch network traffic\r\nexport const fetchNetworkTraffic = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<NetworkTrafficResponse> => {\r\n  try {\r\n    const response = await axios.get<NetworkTrafficResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/network/`, // Added trailing slash\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Network traffic fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching network traffic:\", error);\r\n    throw new Error(\"Failed to fetch network traffic\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAQA;AACA,MAAMC,YAAY,GAAG,0BAA0B,CAAC,CAAC;;AAEjD;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAkC;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,GAAGH,YAAY,iBAAiB,CAAC;IACnC,CAAC;IACDI,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAClE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtD,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAA+B;EACzD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAW,GAAGH,YAAY,WAAW,CAAC,CAAC,CAAC;IACxEI,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAC7D,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC,CAAC;IACjD,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAChCC,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACiB;EACnC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,GAAGH,YAAY,mBAAmBW,QAAQ,WAAW;IAAE;IACvD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACrD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,mBAAmB,GAAG,MAAAA,CACjCH,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACkB;EACpC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,GAAGH,YAAY,mBAAmBW,QAAQ,WAAW;IAAE;IACvD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACtD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}