{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reena\\\\Desktop\\\\web-monitoring\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport StatsPanel from \"./components/StatsPanel\";\nimport ChartCard from \"./components/ChartCard\";\nimport ServerList from \"./components/ServerList\";\nimport { fetchServers, fetchAlertCounts, fetchServerMetrics, fetchNetworkTraffic } from \"./services/api\"; // Use the Server type and import API functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [servers, setServers] = useState([]);\n  const [alerts, setAlerts] = useState({\n    critical: 0,\n    medium: 0,\n    low: 0\n  });\n  const [resourceUsage, setResourceUsage] = useState([]);\n  const [networkTraffic, setNetworkTraffic] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Set loading state to true before fetching data\n        setLoading(true);\n        const serversData = await fetchServers();\n        setServers(serversData);\n        const alertCounts = await fetchAlertCounts();\n        setAlerts(alertCounts);\n        if (serversData.length > 0) {\n          // Fetch resource usage and network traffic data for the first server\n          const serverMetrics = await fetchServerMetrics(serversData[0].id);\n          setResourceUsage(serverMetrics.timestamps.map((timestamp, index) => ({\n            name: timestamp,\n            cpu: serverMetrics.cpu_usage[index],\n            ram: serverMetrics.ram_usage[index],\n            disk: serverMetrics.disk_usage[index]\n          })));\n          const networkTrafficData = await fetchNetworkTraffic(serversData[0].id);\n          setNetworkTraffic(networkTrafficData.timestamps.map((timestamp, index) => ({\n            name: timestamp,\n            incoming: networkTrafficData.network_in[index]\n          })));\n        }\n\n        // Set loading state to false after data fetching is complete\n        setLoading(false);\n      } catch (e) {\n        setError(\"Failed to fetch data from the API.\");\n        setLoading(false); // Set loading to false on error\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this); // Simple loading state\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      style: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n        alerts: alerts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resource Monitoring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.grid,\n          children: [/*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"CPU Usage\",\n            type: \"line\",\n            data: resourceUsage,\n            dataKey: \"cpu\",\n            color: \"#3498db\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"RAM Usage\",\n            type: \"line\",\n            data: resourceUsage,\n            dataKey: \"ram\",\n            color: \"#27ae60\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"Disk Usage\",\n            type: \"bar\",\n            data: resourceUsage,\n            dataKey: \"disk\",\n            color: \"#e74c3c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"Network Traffic\",\n            type: \"line\",\n            data: networkTraffic,\n            dataKey: \"incoming\",\n            color: \"#9b59b6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Server Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ServerList, {\n          servers: servers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"IUBqvEA0YhxgUqHhgVosr6Xbe/E=\");\n_c = App;\nconst styles = {\n  container: {\n    minHeight: \"100vh\",\n    backgroundColor: \"#f4f4f4\",\n    padding: \"2rem\"\n  },\n  content: {\n    maxWidth: \"1200px\",\n    margin: \"0 auto\"\n  },\n  grid: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1rem\"\n  }\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Header","StatsPanel","ChartCard","ServerList","fetchServers","fetchAlertCounts","fetchServerMetrics","fetchNetworkTraffic","jsxDEV","_jsxDEV","App","_s","servers","setServers","alerts","setAlerts","critical","medium","low","resourceUsage","setResourceUsage","networkTraffic","setNetworkTraffic","error","setError","loading","setLoading","fetchData","serversData","alertCounts","length","serverMetrics","id","timestamps","map","timestamp","index","name","cpu","cpu_usage","ram","ram_usage","disk","disk_usage","networkTrafficData","incoming","network_in","e","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","textAlign","styles","container","content","grid","title","type","data","dataKey","_c","minHeight","backgroundColor","padding","maxWidth","margin","display","gridTemplateColumns","gap","$RefreshReg$"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport StatsPanel from \"./components/StatsPanel\";\nimport ChartCard from \"./components/ChartCard\";\nimport ServerList from \"./components/ServerList\";\nimport {\n  Server,\n  fetchServers,\n  fetchAlertCounts,\n  fetchServerMetrics,\n  fetchNetworkTraffic,\n} from \"./services/api\"; // Use the Server type and import API functions\n\ninterface AlertCounts {\n  critical: number;\n  medium: number;\n  low: number;\n}\n\ninterface ResourceUsage {\n  name: string;\n  cpu: number;\n  ram: number;\n  disk: number;\n}\n\ninterface NetworkTraffic {\n  name: string;\n  incoming: number;\n}\n\nconst App: React.FC = () => {\n  const [servers, setServers] = useState<Server[]>([]);\n  const [alerts, setAlerts] = useState<AlertCounts>({\n    critical: 0,\n    medium: 0,\n    low: 0,\n  });\n  const [resourceUsage, setResourceUsage] = useState<ResourceUsage[]>([]);\n  const [networkTraffic, setNetworkTraffic] = useState<NetworkTraffic[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Set loading state to true before fetching data\n        setLoading(true);\n\n        const serversData = await fetchServers();\n        setServers(serversData);\n\n        const alertCounts = await fetchAlertCounts();\n        setAlerts(alertCounts);\n\n        if (serversData.length > 0) {\n          // Fetch resource usage and network traffic data for the first server\n          const serverMetrics = await fetchServerMetrics(serversData[0].id);\n          setResourceUsage(\n            serverMetrics.timestamps.map((timestamp, index) => ({\n              name: timestamp,\n              cpu: serverMetrics.cpu_usage[index],\n              ram: serverMetrics.ram_usage[index],\n              disk: serverMetrics.disk_usage[index],\n            }))\n          );\n\n          const networkTrafficData = await fetchNetworkTraffic(\n            serversData[0].id\n          );\n          setNetworkTraffic(\n            networkTrafficData.timestamps.map((timestamp, index) => ({\n              name: timestamp,\n              incoming: networkTrafficData.network_in[index],\n            }))\n          );\n        }\n\n        // Set loading state to false after data fetching is complete\n        setLoading(false);\n      } catch (e) {\n        setError(\"Failed to fetch data from the API.\");\n        setLoading(false); // Set loading to false on error\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>; // Simple loading state\n  }\n\n  if (error) {\n    return <div style={{ color: \"red\", textAlign: \"center\" }}>{error}</div>;\n  }\n\n  return (\n    <div style={styles.container}>\n      <Header />\n      <main style={styles.content}>\n        <StatsPanel alerts={alerts} />\n        <section>\n          <h2>Resource Monitoring</h2>\n          <div style={styles.grid}>\n            <ChartCard\n              title=\"CPU Usage\"\n              type=\"line\"\n              data={resourceUsage}\n              dataKey=\"cpu\"\n              color=\"#3498db\"\n            />\n            <ChartCard\n              title=\"RAM Usage\"\n              type=\"line\"\n              data={resourceUsage}\n              dataKey=\"ram\"\n              color=\"#27ae60\"\n            />\n            <ChartCard\n              title=\"Disk Usage\"\n              type=\"bar\"\n              data={resourceUsage}\n              dataKey=\"disk\"\n              color=\"#e74c3c\"\n            />\n            <ChartCard\n              title=\"Network Traffic\"\n              type=\"line\"\n              data={networkTraffic}\n              dataKey=\"incoming\"\n              color=\"#9b59b6\"\n            />\n          </div>\n        </section>\n\n        <section>\n          <h2>Server Status</h2>\n          <ServerList servers={servers} />\n        </section>\n      </main>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    minHeight: \"100vh\",\n    backgroundColor: \"#f4f4f4\",\n    padding: \"2rem\",\n  },\n  content: {\n    maxWidth: \"1200px\",\n    margin: \"0 auto\",\n  },\n  grid: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1rem\",\n  },\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}