{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reena\\\\Desktop\\\\web-monitoring\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// src/App.tsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchServers, fetchServerMetrics, fetchNetworkTraffic } from \"./services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [serversData, setServersData] = useState([]);\n  const [resourceUsage, setResourceUsage] = useState([]); // Update with correct type\n  const [networkTraffic, setNetworkTraffic] = useState([]); // Update with correct type\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const servers = await fetchServers();\n        setServersData(servers);\n        if (servers.length > 0) {\n          const serverMetrics = await fetchServerMetrics(servers[0].id);\n          setResourceUsage(serverMetrics.timestamps.map((timestamp, index) => ({\n            name: timestamp,\n            cpu: serverMetrics.cpu_usage[index],\n            ram: serverMetrics.ram_usage[index]\n          })));\n          const networkTrafficData = await fetchNetworkTraffic(servers[0].id);\n          setNetworkTraffic(networkTrafficData.timestamps.map((timestamp, index) => ({\n            name: timestamp,\n            incoming: networkTrafficData.network_in[index]\n          })));\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Server Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8nx9CvKvZCYYe46DLi8J4OUPC/4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchServers","fetchServerMetrics","fetchNetworkTraffic","jsxDEV","_jsxDEV","App","_s","serversData","setServersData","resourceUsage","setResourceUsage","networkTraffic","setNetworkTraffic","fetchData","servers","length","serverMetrics","id","timestamps","map","timestamp","index","name","cpu","cpu_usage","ram","ram_usage","networkTrafficData","incoming","network_in","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/App.tsx"],"sourcesContent":["// src/App.tsx\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  fetchServers,\n  fetchServerMetrics,\n  fetchNetworkTraffic,\n} from \"./services/api\";\nimport {\n  Server,\n  ServerMetricsResponse,\n  NetworkTrafficResponse,\n} from \"./services/api\";\n\nconst App: React.FC = () => {\n  const [serversData, setServersData] = useState<Server[]>([]);\n  const [resourceUsage, setResourceUsage] = useState<any[]>([]); // Update with correct type\n  const [networkTraffic, setNetworkTraffic] = useState<any[]>([]); // Update with correct type\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const servers = await fetchServers();\n        setServersData(servers);\n\n        if (servers.length > 0) {\n          const serverMetrics: ServerMetricsResponse = await fetchServerMetrics(\n            servers[0].id\n          );\n          setResourceUsage(\n            serverMetrics.timestamps.map(\n              (timestamp: string, index: number) => ({\n                name: timestamp,\n                cpu: serverMetrics.cpu_usage[index],\n                ram: serverMetrics.ram_usage[index],\n              })\n            )\n          );\n\n          const networkTrafficData: NetworkTrafficResponse =\n            await fetchNetworkTraffic(servers[0].id);\n          setNetworkTraffic(\n            networkTrafficData.timestamps.map(\n              (timestamp: string, index: number) => ({\n                name: timestamp,\n                incoming: networkTrafficData.network_in[index],\n              })\n            )\n          );\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h1>Server Monitoring Dashboard</h1>\n      {/* Render the fetched data here */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,YAAY,EACZC,kBAAkB,EAClBC,mBAAmB,QACd,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOxB,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAC5D,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAQ,EAAE,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAQ,EAAE,CAAC,CAAC,CAAC;;EAEjED,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMd,YAAY,CAAC,CAAC;QACpCQ,cAAc,CAACM,OAAO,CAAC;QAEvB,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;UACtB,MAAMC,aAAoC,GAAG,MAAMf,kBAAkB,CACnEa,OAAO,CAAC,CAAC,CAAC,CAACG,EACb,CAAC;UACDP,gBAAgB,CACdM,aAAa,CAACE,UAAU,CAACC,GAAG,CAC1B,CAACC,SAAiB,EAAEC,KAAa,MAAM;YACrCC,IAAI,EAAEF,SAAS;YACfG,GAAG,EAAEP,aAAa,CAACQ,SAAS,CAACH,KAAK,CAAC;YACnCI,GAAG,EAAET,aAAa,CAACU,SAAS,CAACL,KAAK;UACpC,CAAC,CACH,CACF,CAAC;UAED,MAAMM,kBAA0C,GAC9C,MAAMzB,mBAAmB,CAACY,OAAO,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC;UAC1CL,iBAAiB,CACfe,kBAAkB,CAACT,UAAU,CAACC,GAAG,CAC/B,CAACC,SAAiB,EAAEC,KAAa,MAAM;YACrCC,IAAI,EAAEF,SAAS;YACfQ,QAAQ,EAAED,kBAAkB,CAACE,UAAU,CAACR,KAAK;UAC/C,CAAC,CACH,CACF,CAAC;QACH;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDjB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAA4B,QAAA,eACE5B,OAAA;MAAA4B,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjC,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAlDID,GAAa;AAAAgC,EAAA,GAAbhC,GAAa;AAoDnB,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}