{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:8000/api\"; // Updated to point to the local backend for development\n\nexport const fetchAlertCounts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts/counts`);\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching alert counts:\", error); // Simplified error logging\n    throw error;\n  }\n};\nexport const fetchServers = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/servers`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"Servers fetched successfully:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching servers:\", error);\n    throw error;\n  }\n};\nexport const fetchServerMetrics = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/metrics`, {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Server metrics fetched:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching server metrics:\", error);\n    throw error;\n  }\n};\nexport const fetchNetworkTraffic = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/network`,\n    // Updated to include /metrics prefix\n    {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Network traffic fetched:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching network traffic:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchAlertCounts","response","get","console","log","data","error","fetchServers","fetch","ok","Error","status","json","fetchServerMetrics","serverId","hours","params","fetchNetworkTraffic"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:8000/api\"; // Updated to point to the local backend for development\r\n\r\nexport interface AlertCounts {\r\n  critical: number;\r\n  medium: number;\r\n  low: number;\r\n}\r\n\r\nexport interface Server {\r\n  id: number;\r\n  name: string;\r\n  ip: string; // Updated property name from ip_address to ip\r\n  location: string;\r\n  status: string; // online, offline, maintenance\r\n  lastUpdated: string; // Updated property name from last_checked to lastUpdated\r\n}\r\n\r\nexport interface ServerMetricsResponse {\r\n  timestamps: string[];\r\n  cpu_usage: number[];\r\n  ram_usage: number[];\r\n  disk_usage: number[];\r\n  application_usage: number[];\r\n}\r\n\r\nexport interface NetworkTrafficResponse {\r\n  timestamps: string[];\r\n  network_in: number[];\r\n}\r\n\r\nexport const fetchAlertCounts = async (): Promise<AlertCounts> => {\r\n  try {\r\n    const response = await axios.get<AlertCounts>(\r\n      `${API_BASE_URL}/alerts/counts`\r\n    );\r\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching alert counts:\", error); // Simplified error logging\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServers = async (): Promise<Server[]> => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/servers`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log(\"Servers fetched successfully:\", data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching servers:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServerMetrics = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<ServerMetricsResponse> => {\r\n  try {\r\n    const response = await axios.get<ServerMetricsResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/metrics`,\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Server metrics fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching server metrics:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchNetworkTraffic = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<NetworkTrafficResponse> => {\r\n  try {\r\n    const response = await axios.get<NetworkTrafficResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/network`, // Updated to include /metrics prefix\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Network traffic fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching network traffic:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AA8BlD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAkC;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,GAAGH,YAAY,gBACjB,CAAC;IACDI,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAClE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAA+B;EACzD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGT,YAAY,UAAU,CAAC;IACvD,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClCT,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEC,IAAI,CAAC;IAClD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMO,kBAAkB,GAAG,MAAAA,CAChCC,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACiB;EACnC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,GAAGH,YAAY,mBAAmBe,QAAQ,UAAU,EACpD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACrD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMW,mBAAmB,GAAG,MAAAA,CACjCH,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACkB;EACpC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,GAAGH,YAAY,mBAAmBe,QAAQ,UAAU;IAAE;IACtD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACtD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}