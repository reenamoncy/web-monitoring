{"ast":null,"code":"// src/services/api.ts\n\nimport axios from \"axios\";\n\n// Define types for API responses\n\n// Make sure API_BASE_URL is set correctly from the environment variable\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// API requests\nexport const fetchAlertCounts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts/counts/`);\n    console.log(\"Alert counts fetched successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching alert counts:\", error);\n    throw error;\n  }\n};\nexport const fetchServers = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/servers/`);\n    console.log(\"Servers fetched successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching servers:\", error);\n    throw error;\n  }\n};\nexport const fetchServerMetrics = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/metrics/`, {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Server metrics fetched successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching server metrics:\", error);\n    throw error;\n  }\n};\nexport const fetchNetworkTraffic = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/network/`, {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Network traffic fetched successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching network traffic:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","fetchAlertCounts","response","get","console","log","data","error","fetchServers","fetchServerMetrics","serverId","hours","params","fetchNetworkTraffic"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\r\n\r\nimport axios from \"axios\";\r\n\r\n// Define types for API responses\r\nexport interface AlertCounts {\r\n  critical: number;\r\n  high: number;\r\n  medium: number;\r\n  low: number;\r\n}\r\n\r\nexport interface Server {\r\n  id: number;\r\n  name: string;\r\n  status: string;\r\n}\r\n\r\nexport interface ServerMetricsResponse {\r\n  timestamps: string[];\r\n  cpu_usage: number[];\r\n  ram_usage: number[];\r\n}\r\n\r\nexport interface NetworkTrafficResponse {\r\n  timestamps: string[];\r\n  network_in: number[];\r\n  network_out: number[];\r\n}\r\n\r\n// Make sure API_BASE_URL is set correctly from the environment variable\r\nconst API_BASE_URL =\r\n  process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// API requests\r\nexport const fetchAlertCounts = async (): Promise<AlertCounts> => {\r\n  try {\r\n    const response = await axios.get<AlertCounts>(\r\n      `${API_BASE_URL}/alerts/counts/`\r\n    );\r\n    console.log(\"Alert counts fetched successfully:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching alert counts:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServers = async (): Promise<Server[]> => {\r\n  try {\r\n    const response = await axios.get<Server[]>(`${API_BASE_URL}/servers/`);\r\n    console.log(\"Servers fetched successfully:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching servers:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServerMetrics = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<ServerMetricsResponse> => {\r\n  try {\r\n    const response = await axios.get<ServerMetricsResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/metrics/`,\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Server metrics fetched successfully:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching server metrics:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchNetworkTraffic = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<NetworkTrafficResponse> => {\r\n  try {\r\n    const response = await axios.get<NetworkTrafficResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/network/`,\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Network traffic fetched successfully:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching network traffic:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AA0BA;AACA,MAAMC,YAAY,GAChBC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE9D;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAkC;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAC9B,GAAGN,YAAY,iBACjB,CAAC;IACDO,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAChE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAA+B;EACzD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAW,GAAGN,YAAY,WAAW,CAAC;IACtEO,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC3D,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAChCC,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACiB;EACnC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAC9B,GAAGN,YAAY,mBAAmBa,QAAQ,WAAW,EACrD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAClE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMM,mBAAmB,GAAG,MAAAA,CACjCH,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACkB;EACpC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAC9B,GAAGN,YAAY,mBAAmBa,QAAQ,WAAW,EACrD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACnE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}