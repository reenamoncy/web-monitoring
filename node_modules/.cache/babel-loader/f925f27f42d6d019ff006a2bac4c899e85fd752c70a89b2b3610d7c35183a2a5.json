{"ast":null,"code":"export const fetchAlertCounts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts/counts/` // Added trailing slash\n    );\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching alert counts:\", error); // Debugging log\n    throw error;\n  }\n};\nexport const fetchServers = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/servers/`); // Added trailing slash\n    console.log(\"Servers fetched successfully:\", response.data); // Debugging log\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching servers:\", error); // Debugging log\n    throw error;\n  }\n};\nexport const fetchServerMetrics = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/metrics/`,\n    // Added trailing slash\n    {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Server metrics fetched:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching server metrics:\", error);\n    throw error;\n  }\n};\nexport const fetchNetworkTraffic = async (serverId, hours = 24) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/metrics/server/${serverId}/network/`,\n    // Added trailing slash\n    {\n      params: {\n        hours\n      }\n    });\n    console.log(\"Network traffic fetched:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching network traffic:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchAlertCounts","response","axios","get","API_BASE_URL","console","log","data","error","fetchServers","fetchServerMetrics","serverId","hours","params","fetchNetworkTraffic"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/services/api.ts"],"sourcesContent":["export const fetchAlertCounts = async (): Promise<AlertCounts> => {\r\n  try {\r\n    const response = await axios.get<AlertCounts>(\r\n      `${API_BASE_URL}/alerts/counts/` // Added trailing slash\r\n    );\r\n    console.log(\"Alert counts fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching alert counts:\", error); // Debugging log\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServers = async (): Promise<Server[]> => {\r\n  try {\r\n    const response = await axios.get<Server[]>(`${API_BASE_URL}/servers/`); // Added trailing slash\r\n    console.log(\"Servers fetched successfully:\", response.data); // Debugging log\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching servers:\", error); // Debugging log\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchServerMetrics = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<ServerMetricsResponse> => {\r\n  try {\r\n    const response = await axios.get<ServerMetricsResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/metrics/`, // Added trailing slash\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Server metrics fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching server metrics:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchNetworkTraffic = async (\r\n  serverId: number,\r\n  hours: number = 24\r\n): Promise<NetworkTrafficResponse> => {\r\n  try {\r\n    const response = await axios.get<NetworkTrafficResponse>(\r\n      `${API_BASE_URL}/metrics/server/${serverId}/network/`, // Added trailing slash\r\n      {\r\n        params: { hours },\r\n      }\r\n    );\r\n    console.log(\"Network traffic fetched:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching network traffic:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAkC;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC9B,GAAGC,YAAY,iBAAiB,CAAC;IACnC,CAAC;IACDC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;IAClE,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAA+B;EACzD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAW,GAAGC,YAAY,WAAW,CAAC,CAAC,CAAC;IACxEC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;IAC7D,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAChCC,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACiB;EACnC,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC9B,GAAGC,YAAY,mBAAmBO,QAAQ,WAAW;IAAE;IACvD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,QAAQ,CAACM,IAAI,CAAC;IACrD,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMM,mBAAmB,GAAG,MAAAA,CACjCH,QAAgB,EAChBC,KAAa,GAAG,EAAE,KACkB;EACpC,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC9B,GAAGC,YAAY,mBAAmBO,QAAQ,WAAW;IAAE;IACvD;MACEE,MAAM,EAAE;QAAED;MAAM;IAClB,CACF,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEL,QAAQ,CAACM,IAAI,CAAC;IACtD,OAAON,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}