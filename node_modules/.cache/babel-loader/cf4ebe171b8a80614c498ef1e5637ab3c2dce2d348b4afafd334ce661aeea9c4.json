{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reena\\\\Desktop\\\\web-monitoring\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport StatsPanel from \"./components/StatsPanel\";\nimport ChartCard from \"./components/ChartCard\";\nimport ServerList from \"./components/ServerList\";\n// Use the Server type from api.ts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [servers, setServers] = useState([]);\n  const [alerts, setAlerts] = useState({\n    critical: 0,\n    medium: 0,\n    low: 0\n  });\n  const [resourceUsage, setResourceUsage] = useState([]);\n  const [networkTraffic, setNetworkTraffic] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    try {\n      const mockServers = [{\n        id: 1,\n        name: \"Server A\",\n        ip: \"192.168.1.1\",\n        location: \"Data Center 1\",\n        status: \"Online\",\n        lastUpdated: \"10:00 AM\"\n      }, {\n        id: 2,\n        name: \"Server B\",\n        ip: \"192.168.1.2\",\n        location: \"Data Center 2\",\n        status: \"Offline\",\n        lastUpdated: \"9:45 AM\"\n      }];\n      setServers(mockServers);\n      setAlerts({\n        critical: 1,\n        medium: 2,\n        low: 5\n      });\n      const timestamps = [\"10:00\", \"10:10\", \"10:20\"];\n      setResourceUsage(timestamps.map((t, i) => ({\n        timestamp: t,\n        cpu: Math.random() * 100,\n        ram: Math.random() * 100,\n        disk: Math.random() * 100\n      })));\n      setNetworkTraffic(timestamps.map(t => ({\n        timestamp: t,\n        incoming: Math.random() * 1000\n      })));\n    } catch (e) {\n      setError(\"Failed to load mock data.\");\n    }\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      style: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(StatsPanel, {\n        alerts: alerts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resource Monitoring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.grid,\n          children: [/*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"CPU Usage\",\n            type: \"line\",\n            data: resourceUsage,\n            dataKey: \"cpu\",\n            color: \"#3498db\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"RAM Usage\",\n            type: \"line\",\n            data: resourceUsage,\n            dataKey: \"ram\",\n            color: \"#27ae60\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"Disk Usage\",\n            type: \"bar\",\n            data: resourceUsage,\n            dataKey: \"disk\",\n            color: \"#e74c3c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChartCard, {\n            title: \"Network Traffic\",\n            type: \"line\",\n            data: networkTraffic,\n            dataKey: \"incoming\",\n            color: \"#9b59b6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Server Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ServerList, {\n          servers: servers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"WvgLc4o3qsVDnuEDrP/fJZ7pTwo=\");\n_c = App;\nconst styles = {\n  container: {\n    minHeight: \"100vh\",\n    backgroundColor: \"#f4f4f4\",\n    padding: \"2rem\"\n  },\n  content: {\n    maxWidth: \"1200px\",\n    margin: \"0 auto\"\n  },\n  grid: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1rem\"\n  }\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Header","StatsPanel","ChartCard","ServerList","jsxDEV","_jsxDEV","App","_s","servers","setServers","alerts","setAlerts","critical","medium","low","resourceUsage","setResourceUsage","networkTraffic","setNetworkTraffic","error","setError","mockServers","id","name","ip","location","status","lastUpdated","timestamps","map","t","i","timestamp","cpu","Math","random","ram","disk","incoming","e","style","color","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","styles","container","content","grid","title","type","data","dataKey","_c","minHeight","backgroundColor","padding","maxWidth","margin","display","gridTemplateColumns","gap","$RefreshReg$"],"sources":["C:/Users/Reena/Desktop/web-monitoring/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport StatsPanel from \"./components/StatsPanel\";\nimport ChartCard from \"./components/ChartCard\";\nimport ServerList from \"./components/ServerList\";\nimport { Server } from \"./services/api\"; // Use the Server type from api.ts\n\ninterface AlertCounts {\n  critical: number;\n  medium: number;\n  low: number;\n}\n\nconst App: React.FC = () => {\n  const [servers, setServers] = useState<Server[]>([]);\n  const [alerts, setAlerts] = useState<AlertCounts>({\n    critical: 0,\n    medium: 0,\n    low: 0,\n  });\n  const [resourceUsage, setResourceUsage] = useState<any[]>([]);\n  const [networkTraffic, setNetworkTraffic] = useState<any[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    try {\n      const mockServers: Server[] = [\n        { id: 1, name: \"Server A\", ip: \"192.168.1.1\", location: \"Data Center 1\", status: \"Online\", lastUpdated: \"10:00 AM\" },\n        { id: 2, name: \"Server B\", ip: \"192.168.1.2\", location: \"Data Center 2\", status: \"Offline\", lastUpdated: \"9:45 AM\" },\n      ];\n      setServers(mockServers);\n\n      setAlerts({ critical: 1, medium: 2, low: 5 });\n\n      const timestamps = [\"10:00\", \"10:10\", \"10:20\"];\n      setResourceUsage(\n        timestamps.map((t, i) => ({\n          timestamp: t,\n          cpu: Math.random() * 100,\n          ram: Math.random() * 100,\n          disk: Math.random() * 100,\n        }))\n      );\n\n      setNetworkTraffic(\n        timestamps.map((t) => ({\n          timestamp: t,\n          incoming: Math.random() * 1000,\n        }))\n      );\n    } catch (e) {\n      setError(\"Failed to load mock data.\");\n    }\n  }, []);\n\n  if (error) {\n    return <div style={{ color: \"red\", textAlign: \"center\" }}>{error}</div>;\n  }\n\n  return (\n    <div style={styles.container}>\n      <Header />\n      <main style={styles.content}>\n        <StatsPanel alerts={alerts} />\n        <section>\n          <h2>Resource Monitoring</h2>\n          <div style={styles.grid}>\n            <ChartCard\n              title=\"CPU Usage\"\n              type=\"line\"\n              data={resourceUsage}\n              dataKey=\"cpu\"\n              color=\"#3498db\"\n            />\n            <ChartCard\n              title=\"RAM Usage\"\n              type=\"line\"\n              data={resourceUsage}\n              dataKey=\"ram\"\n              color=\"#27ae60\"\n            />\n            <ChartCard\n              title=\"Disk Usage\"\n              type=\"bar\"\n              data={resourceUsage}\n              dataKey=\"disk\"\n              color=\"#e74c3c\"\n            />\n            <ChartCard\n              title=\"Network Traffic\"\n              type=\"line\"\n              data={networkTraffic}\n              dataKey=\"incoming\"\n              color=\"#9b59b6\"\n            />\n          </div>\n        </section>\n\n        <section>\n          <h2>Server Status</h2>\n          <ServerList servers={servers} />\n        </section>\n      </main>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    minHeight: \"100vh\",\n    backgroundColor: \"#f4f4f4\",\n    padding: \"2rem\",\n  },\n  content: {\n    maxWidth: \"1200px\",\n    margin: \"0 auto\",\n  },\n  grid: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1rem\",\n  },\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}